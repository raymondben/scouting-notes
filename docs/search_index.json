[
["index.html", "Volleyball scouting notes 1 About this", " Volleyball scouting notes Ben Raymond 1 About this Blah blah Generated using bookdown; the source material is on GitHub. "],
["general-principles.html", "2 General principles 2.1 Principles 2.2 Software 2.3 Scouting principles", " 2 General principles Statistical analysis of volleyball provides a valuable source of information for coaches and players about individual and team performances. Amongst other things it can help find areas that could be improved on, areas that are working well, and assess how game performance compares to training goals and team strategies. Experienced coaches can make many of these assessments directly, but analysis can help because it is more objective (it can provide quantitative assessments of performance, rather than subjective ones, and it is less prone to issues such as confirmation bias or a tendency to remember events that happened most recently at the expense of earlier events). It can also help assesss facets of play that can’t easily be isolated by direct observation. It is helpful to separate the process into several components: Collecting match data (aka “scouting”). This is the raw play-by-play information that, on its own, does not provide actionable information. It’s just raw data. Turning the play-by-play data into actionable information, such as performance indicators that allow the team to evaluate individual player performance as well as the effectiveness of its offensive/defensive strategies. Scouting software packages generally provide this type of analytical functionality, but other options are also possible (specific apps for analysis, that are separate from the scouting software). Communicating that information to the coaches and players, and ensuring that the information being generated is appropriate for the training and match strategies of the team. For example, if the team is using a particular defensive strategy, the statistics that we generate should provide information that allows performance against that strategy, and the overall effectiveness of that strategy, to be evaluated. In this guide we’re mostly focusing on #1, but bearing in mind that we need to deliver #2 and #3. 2.1 Principles We want to collect our raw data in such a way that it: is as objective as possible, by minimizing subjective assessments by the scout. is consistent (from one scout to another, and also over time for the same scout). maximizes the value of that data for different analyses (i.e. we can answer a range of different questions using these data, rather than collecting data that can only be used to answer a narrow range of questions). In particular we want to keep our options open for answering questions that we haven’t thought of yet. There is a distinction between the data being scouted and the information that can be extracted from those data. In some cases the information that we want to report isn’t directly obvious in the data that we are collecting, and some further statistical analysis is required to extract it. is efficient, by balancing the demands on the scout against the value of the information that we ask them to collect. Every extra detail that we ask them to scout adds effort: does that extra detail actually give us valuable information? Can we avoid scouting it manually because it be inferred or filled in automatically later? follows any established community norms or conventions, if necessary. 2.2 Software 2.2.1 Scouting DataVolley (https://www.dataproject.com/Products/EU/en/Volleyball/DataVolley4) is the well-established standard software, and is used by many national and professional teams. It is capable of recording all match information that you are ever likely to need, but comes with the disadvantage of price and complexity. VBStats (http://peranasports.com/software/vbstatshd/) is an iPad-based scouting app developed by the Australian-based company Perana Sports. It is not quite as capable as DataVolley, but is nevertheless comprehensive (especially when used with the untan.gl apps described below). It is considerably easier to use than DataVolley, and also considerably cheaper (~$40 AUD for a perpetual license). 2.2.2 Analysis 2.2.2.1 Inbuilt DataVolley, VBStats, and other scouting packages generally have analytical capability. This is convenient, but may be limited. DataVolley capabilities can be extended through custom worksheets, but with other packages (e.g. VBStats) you are limited to what the app provides. 2.2.2.2 Online apps Science Untangled maintains a suite of online analytical apps. They work with files scouted in DataVolley or VBStats and provide analytical capability that complements or improves on the inbuilt analytical capabilities of those packages. 2.2.2.3 R For complete control and customization, you can write your own analysis routines if you are so inclined. The R packages peranavolley and datavolley provide a starting point for this, by allowing DataVolley and VBStats files to be read into the R software package. You then have the full arsenal of R’s inbuilt statistical and graphing capability at your disposal, as well as its ~15,000 user-contributed packages. The untan.gl apps are built with R. 2.3 Scouting principles 2.3.1 Scouting from video TBD, details. 2.3.2 Live scouting Same, but because we are scouting in real-time we are generally limited in what can be scouted. The focus is therefore on scouting the data that gives the most valuable in-game information for the coach. "],
["vbstats-scouting-from-video.html", "3 VBStats scouting from video 3.1 Skill evaluations 3.2 Entering ball paths 3.3 Skill-specific conventions 3.4 Assigning errors", " 3 VBStats scouting from video This guide describes a particular set of conventions for scouting volleyball matches using the Perana Sports VBStats app. These conventions are intended to give consistent scouted files that work well with the peranavolley R package, but without requiring an overly-onerous scouting procedure. Scouts should be familiar with the VBStats User Guide, in particular the Actions and Results and “Coding from a video (both teams)” sections. 3.1 Skill evaluations 3.1.1 Passes (serve receptions) and digs P3 = a good or perfect pass, giving the setter the option to set to any attacker (in DataVolley this would be scouted as “R#” or “R+”) P2 = an “ok” pass (DataVolley “R!”), giving restricted attack options (but still more than one option). Often these are passes that force the setter to set from 3m or more from the net. The setter doesn’t have the option to set a true first tempo, but outside attacks can be made at normal medium/fast tempo. Note that some setters will still set their middle on these sets with a slower (low) quick ball. Mild overpasses or poorly positioned passes might also be rated as P2, if the setter only has two real options (say, the quick hitter and opposite on a low pass to position 2) P1 = a negative pass or an overpass (DataVolley “R-” or “R/”), generally only allowing a high ball set to be made or even no proper attack at all (a freeball back to the opposition or an overapass) Rotation error by the receiving team: TBD 3.1.2 Serves Rate serves by pass quality, so that a poor serve (S1) is one that allowed a perfect pass (P3), an OK serve (S2) with an OK pass (P2), and a good serve (S3) was one that the opposition was only able to make a poor pass (P1) on. On serve errors, enter the ball path and also indicate the reason (net/out long/out side). Rotation error by the serving team: TBD 3.2 Entering ball paths Enter the ball path for all serves and attacks, showing the start and end points of the serve or attack. It’s easiest to expand the court diagram to do this (this will happen automatically for attacks, but for serves you may need to use the small white square in the bottom-right of the court diagram). You can re-draw the ball path several times if you aren’t happy with it on the first attempt. For attacks, the starting location is used to label the attack type, so it’s important that the starting location is behind the 3m line for back row attacks, and in front of the 3m line for front-row attacks. If it’s a front-row player making the attack, enter the starting coordinate in front of the 3m line, even if they actually attack from behind it. Similarly, if it’s a back row attack, make sure the starting coordinate is behind the 3m line (even though in reality the attack might be contacting the ball in the air in front of the 3m line). The only time you would enter a coordinate in front of the 3m line for a back-row attacker is if they put a freeball over from in front of the 3m line (starting coordinates aren’t used to classify freeballs, only actual attacks). The coach/technical coordinator might also ask for ball paths to be entered for sets. The start point is the important piece of information in this case (so that we know where the setter made the set from). This information allows for setter choices to be examined according to where on court they made the set from, but this is not always needed. 3.3 Skill-specific conventions 3.3.1 Sets Unless the coach/technical coordinator has asked for sets to be scouted, don’t scout setting actions except for set errors. Setter dumps are always entered (but these are entered as attack actions of type “dump”, not as set actions). If we scout all setting actions, it’s extra work for the scout, but it allows some additional statistical insight. In particular, we can examine how a setter changes their set choice depending on where on court the pass goes (e.g. where does a setter tend to set given a poor pass to position 4, compared to a poor pass to position 2?). Thus, if the coach/technical director has asked for setting actions to be scouted, then all sets should be scouted, including the ball path of the set. The starting position of the ball path is where the setter sets from; the end of the ball path is where the set goes to (where the attacker makes contact with the ball, or where ball bounces/hits the net in those situations). Do not select the “Record assists” option in the app settings. Doing this will cause a set action to be automatically inserted, but only on attack kills. Thus, we don’t get consistent scouting of setting actions. 3.3.2 Attacks An attack that goes off the block these should be scouted as “off-block” by selecting that option in the detail screen and entering a ball path that goes off the block. Enter the number of blockers on each attack. 3.3.2.1 Setting zones Setting zones are used in VBStats to indicate particular attack types. When you scout an attack, you can optionally assign one of five pre-designated setting zones. You can also leave the setting zone un-assigned. We use the setting zone in conjunction with the attack coordinates to generate more meaningful attack descriptions. Use the following setting zones: Setting zone Attack type Equivalent DataVolley attack code 1 Quick ball in front X1 2 Quick ball behind X2 3 Quick ball at a distance in front of the setter, sometimes called a B-quick X7 4 Slide attack CF 5 High ball V5, VP, etc When we process the scouted file, the following rules are applied: If the setting zone has been specified as one of the first four (i.e. not a high ball), the associated DataVolley attack code (X1, X2, etc) will be inserted into the attack_code column of the data. If setting zone 5 (high ball) has been specified, the attack will be labelled according to its starting coordinate. For example, a highball attack from position 4 will be given the attack_code V5, and a back-row right-side highball (from position 9 or 1) will be given V8. If the setting zone has been left empty, the attack will be given an attack code according to its starting coordinate, assuming a standard tempo attack. For example, an outside hit from position 4 will be attack_code X5 (this type of attack is also known as a “black” or “11”), and a back-row middle attack (from position 8 or 6) will be attack_code XP (pipe). 3.3.3 Freeballs As of VBStats version 2.34.232, there isn’t a specific action for freeballs. A freeball over (i.e. an easy ball put over the net to the opposition when no attack is possible) should be scouted as an attack, with the attack type “Dump” and setting zone “High”. A freeball dig (the subsequent dig made on such a ball) should be scouted as a normal defense (dig) action. If the freeball over happens to win the point, it is important to include a dig following it, with “error” evaluation. If no opposition player actually performed a dig, scout the dig anyway, and assign it to the player who should have made the dig (see the “Assigning errors” section below). When the scouted file is processed, any “dump” attacks performed by a setter will be treated as setter dumps, but “high dump” attacks (by a setter) and “dump” attacks (by non-setters) will be treated as freeballs over. Additionally, any dig following a freeball over will be treated as a freeball dig. This allows us to examine freeball-specific statistics, if we wish. 3.3.4 Blocks TBD - how to handle blocks and block touches. 3.4 Assigning errors Remember from our general principles that there is a distinction between the scouted data and the information that we generate from it. Sometimes we will scout something as an “error” even though we won’t consider it as one when we report the results. The converse can also be true: we might treat something as an error in our report even though it isn’t scouted as such in the data. Scouting errors can be confusing! The following describes our conventions, from most straightforward to most confusing. 3.4.1 Serve Any serve fault is scouted as an error (foot fault, serve out, serve into the net). Rotation errors should also be scouted (not clear how best to do this in VBStats though?) 3.4.2 Reception A serve ace should always be accompanied by a reception error, and vice-versa. For a serve ace, the reception error should be assigned to the player who had responsibility for passing that serve. If the ball lands between two receiving players, assign the error to the one that was most at fault. Rotation errors should also be scouted (TBD how to best enter these in VBStats). 3.4.3 Freeball digs Freeball digs are treated the same as receptions. Any loss of point on a freeball dig should be scouted as an error, assigned to the player who had responsibility for the dig. 3.4.4 Attack Direct errors by the attacker (net violation, reach, hit out, hit into the net, back-row attacker inside the 3m line, etc) should be scouted as attack errors. Blocked attacks are not usually considered to be errors for the purposes of analysis, but with some scouting software they must be scouted as errors (e.g. in VBStats a blocked attack must be entered as an error, with reason “blocked”. These will not be treated as errors in our downstream analyses, though). 3.4.5 Block For blocking, only scout errors that are direct errors by the blocking player (net violation, reach, catch, back-row player blocking, etc). An attack hit that goes off the block for a kill is not scouted as a block error (recall that these should be scouted as “off-block” by entering a ball path that goes off the block and selecting the “off-block” option in the detail screen if it has not automatically been selected). A blocker who is out of position leading to an attack kill is not scouted as an error, even though it might be considered to be one by many coaches. In our downstream analyses, we can get insights into blocker position by other means, so we keep the scouting of “block errors” for direct (unforced) blocking errors. 3.4.6 Set Any set fault that leads directly to the loss of a point (double-contact, net violation, reach, etc) should be scouted as an error, as should any poor set that directly leads to the loss of a point (e.g. an unhittable set). There is an unavoidable element of subjectivity in this situation: say there was a poor set that the attacker tried to save, but contacted the net in doing so. If the set was clearly un-saveable, then the error was the setter’s. If the set was tight on the net (but playable) and the attacker just made a mess of saving it, then the error was the attacker’s. But there will be situations where it is not entirely clear whether it was the setter’s fault for a poor set or the attacker’s fault for failing to play it. There is no simple answer here - assign the error to whichever player you think was most at fault. Set errors are relatively rare, so this one usually doesn’t matter tremendously. Other subjective situations include tactical/decision mistakes, e.g.: a set that goes to an attacker who is out of position and makes an error in attempting to hit it (probably scout as attacker error) a set that goes to an attacker with 3 blockers when another attacker is entirely open, and the point is lost on that attack (do not scout as a set error). 3.4.7 Dig Dig (defensive) errors are perhaps the least clear. Some defensive plays are clearly errors (defender out of position, or an easy ball that should have been dug, or an attack in that was not played because the defender incorrectly decided that the ball was going to land out). However, there are also many situations in which a defender makes a forced error — say, trying to dig a hard attack hit. We have two choices here. We could assign a dig error to every defensive touch that leads to the loss of a point (i.e. forced plus unforced errors). The advantage to this is that we would definitely capture all unforced errors, but the downside is that we will include a lot of forced errors as well. We will also potentially be assigning errors to a defender that were primarily another player’s fault (e.g. a blocker out of position, giving the opposition an attack against no block, leading to a dig “error”). We can still extract useful information from this data, but it requires some level of analysis after collection. The raw dig error rates, for example, are probably not meaningful in the way that most coaches would interpret them (because they are an unknown mix of forced and unforced errors). Alternatively, we can choose to only scout unforced defensive errors (e.g. defender out of position, a poor dig on an easy opposition attack that should have been defended, or a defender failing to play a ball at all because they decided it was going out). The disadvantage to this is that it becomes subjective (e.g. the concept of an “easy opposition attack” will vary from scout to scout and competition to competition). It may also limit the range of analyses that we can later do with these data. In particular, different defenders may be difficult to compare (e.g. amazing defender A who successfully digs a lot of hard-driven balls, compared to poor defender B who makes errors on similar balls. A scout might very well not include the errors of defender B on the basis that they were forced errors, making defender B look better than they actually are in relation to defender A). On balance, we choose the first option: scout all defensive errors, forced and unforced. There will be some circumstances in which it is genuinely impossible to assign a defensive error to an individual player (e.g. an team’s defensive system deliberately leaves a certain part of the court undefended, and an attack lands in that open zone — it’s not necessarily going to be clear whose responsibility that ball was). Scout an attack kill with no corresponding error in these cases, but they should be relatively infrequent. "],
["vbstats-live-match-scouting.html", "4 VBStats live match scouting 4.1 Serve 4.2 Reception 4.3 First attack 4.4 The action that ended the rally", " 4 VBStats live match scouting Scout both teams (button 18 on this screen) The priority is to record the following actions: serve reception first attack the action that ended the rally 4.1 Serve Required: the serving player, and the result of the serve. Except for a serve error, you don’t need to explicitly enter the serve action. Instead, enter the reception action, and the serve will be automatically inserted. Just check that the serving team rotation is correct, so that the serve will be credited to the correct player. For a serve error, you will need to enter the serve action. Note that an ace should always be accompanied by a reception error, assigned to the receiving player who had responsibility for that serve (even if they did not actually play the ball). Don’t enter aces by entering the serving action: enter them by entering a reception error. The serve action (and “Ace” result) will automatically be inserted. Optional: If you have time, enter the ball path of the serve. Don’t bother entering the serve type (jump/float/etc) or other details. These would be entered when scouting from video, but are not a priority for live scouting. 4.2 Reception Required: the receiving player, and the result of the reception (Error, P1, P2, or P3). Remember, a serve ace should always be paired with a reception error, and vice-versa. Otherwise, rate passes P1-P3 according to the guide in the Scouting from video section. 4.3 First attack Required: the attacking player and the result of the attack. Desirable: the number of blockers on the attack. Optional: if you have time, also include the ball path of the attack and the setting zone. (The setting zone, despite its name, tells us the type of attack. See the Scouting from video section for details on scouting attacks.) 4.4 The action that ended the rally Required: the action, player, and result. For example, if the rally ended with an attack error, we want the attack action to be scouted. For an attack kill, we want the attack action to be scouted and probably the associated dig error (see \"Assigning errors\" in the Scouting from video section). For attacks, include the number of blockers and setting zone, and the ball path if you have time. If the rally ended on a serve ace/error, then no extra work should be required. If the rally ended on the first attack, make sure you’ve recorded any associated dig/block action. "],
["common-vbstats-issues.html", "5 Common VBStats issues", " 5 Common VBStats issues As of VBStats version 2.34.232, it is not possible to enter further actions (during the same point) after a serve ace or attack kills. But we want to know who made the reception or dig error, so we need to enter that action as well. There are three options, with the first being the preferred method: enter the serve as S3 (with its ball path and serve type), then enter the pass action (error), then go back and alter the serve evaluation to “Ace”. This will also work for attack kills/dig errors (enter the attack as “Spike in play” first, then the dig error, then change the spike to “Kill”). This is probably the best way to do it. enter only the reception error. The serve action will be automatically entered, but you’ll have to go back to the serve and enter its ball path and serve type. (This won’t work for attack kill/dig errors though). use the short cut panel for two-team scouting to enter the passing player number and pass error, then go back to the serve and enter the ball path and serve type. (This also won’t work for attack kill/dig errors). If the right-hand tool bar is showing the wrong server (a team’s rotation has gotten out of whack), you can change the server with the lineup button (button 9 at the bottom of this page). If the scores needs adjusting (e.g. if the video has dropped out for a period of time, and you need to re-start scouting when the video comes back on), click the scores in the middle of the top toolbar (button 6) and adjust as appropriate. You might also need to adjust the team rotations with the lineup button (see previous point). To edit the setting zone that has been assigned to an already-entered attack, go to the video screen (the video frame icon at the top right of the match detail screen, which is button 23 here). Find the action to edit, and left-swipe. Click the pencil icon and edit as required. This also allows you to un-select the setting zone (i.e. set it back to “no setting zone”), which you can’t currently do during live scouting. "],
["what-information-can-we-get-from-this-data.html", "6 What information can we get from this data?", " 6 What information can we get from this data? TBD. Examples of in-game stats and summaries from VBStats (built in), and via the untan.gl apps. "]
]
